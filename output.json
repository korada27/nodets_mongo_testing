[{"filePath":"C:\\Users\\Madhu Korada\\Desktop\\CODE\\nodets_crud_mongo_testing\\lib\\app.ts","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Madhu Korada\\Desktop\\CODE\\nodets_crud_mongo_testing\\lib\\controllers\\crmController.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":12,"column":5,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":12,"endColumn":54},{"ruleId":"prefer-const","severity":2,"message":"'newConatct' is never reassigned. Use 'const' instead.","line":13,"column":13,"nodeType":"Identifier","messageId":"useConst","endLine":13,"endColumn":23,"fix":{"range":[373,376],"text":"const"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":24,"column":5,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":24,"endColumn":61},{"ruleId":"prefer-const","severity":2,"message":"'allContacts' is never reassigned. Use 'const' instead.","line":26,"column":13,"nodeType":"Identifier","messageId":"useConst","endLine":26,"endColumn":24,"fix":{"range":[696,699],"text":"const"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":32,"column":5,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":32,"endColumn":57},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":41,"column":5,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":41,"endColumn":57},{"ruleId":"prefer-const","severity":2,"message":"'addressAdd' is never reassigned. Use 'const' instead.","line":46,"column":17,"nodeType":"Identifier","messageId":"useConst","endLine":46,"endColumn":27,"fix":{"range":[1261,1264],"text":"const"}}],"errorCount":3,"warningCount":4,"fixableErrorCount":3,"fixableWarningCount":0,"source":"//   /lib/controllers/crmController.ts\r\n\r\nimport * as mongoose from 'mongoose';\r\nimport { ContactSchema } from '../db/models/crmModel';\r\nimport { Request, Response } from 'express';\r\n\r\nconst Contact = mongoose.model('Contact', ContactSchema);\r\n\r\nexport class ContactController {\r\n\r\n    // Add/Save new Data\r\n    public addNewContact(req: Request, res: Response) {\r\n        let newConatct = new Contact(req.body);\r\n        newConatct.save((err, contact) => {\r\n            if (err) {\r\n                res.send(err);\r\n            }\r\n            else {\r\n                res.json(contact);\r\n            }\r\n        })\r\n    }\r\n\r\n    public async getAllContacts(req: Request, res: Response) {\r\n\r\n        let allContacts = await Contact.find({});\r\n        console.log(\"Hello\")\r\n        res.send(allContacts);\r\n    }\r\n\r\n    //Get Single Contact Details\r\n    public getContactWithID(req: Request, res: Response) {\r\n        Contact.findById(req.params.contactId, (err, contact) => {\r\n            if (err) {\r\n                res.send(err);\r\n            }\r\n            res.json(contact);\r\n        });\r\n    }\r\n\r\n    public async addAddress(req: Request, res: Response) {\r\n        console.log(req.params.contactId);\r\n        console.log(req.body);\r\n\r\n        try{\r\n            let addressAdd = await Contact.update(\r\n                { _id: req.params.contactId },\r\n                { $addToSet : { address:[req.body]}}\r\n            );\r\n        res.send(addressAdd)\r\n        }catch(err){\r\n            res.send(err)\r\n        }\r\n    }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Madhu Korada\\Desktop\\CODE\\nodets_crud_mongo_testing\\lib\\db\\index.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":4,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":4,"endColumn":26},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":10,"column":27,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":10,"endColumn":47},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":38,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":38,"endColumn":24}],"errorCount":1,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import mongoose from \"mongoose\";\r\nconst DB_URI = 'mongodb+srv://admin:admin@cluster0.xfyco.mongodb.net/dev';\r\n\r\nexport function connect(){\r\n    return new Promise((resolve, reject) => {\r\n    // mongoose.Promise = global.Promise;\r\n\r\n    if (process.env.NODE_ENV === 'test') {\r\n        console.log(\"Mock DB Connected\");\r\n        const Mockgoose = require('mockgoose').Mockgoose;\r\n        const mockgoose = new Mockgoose(mongoose);\r\n  \r\n        mockgoose.prepareStorage()\r\n          .then(() => {\r\n            mongoose.connect(DB_URI,\r\n              { useNewUrlParser: true, useCreateIndex: true })\r\n              .then((res, err) => {\r\n                if (err) return reject(err);\r\n                // console.log(\"Test DB Connected\");\r\n                resolve();\r\n              })\r\n          })\r\n    }else /* istanbul ignore next */ {\r\n        console.log(\"Dev DB Connected\");\r\n        mongoose.connect(DB_URI, {\r\n            useCreateIndex: true,\r\n            useNewUrlParser: true,\r\n            useUnifiedTopology: true\r\n        })\r\n        .then((res, err) => {\r\n            if (err) return reject(err);\r\n            resolve();\r\n          })\r\n    }\r\n})\r\n}\r\n\r\nexport function close(){\r\n    return mongoose.disconnect();\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Madhu Korada\\Desktop\\CODE\\nodets_crud_mongo_testing\\lib\\db\\models\\crmModel.ts","messages":[{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":7,"column":8,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":16,"endColumn":4}],"errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"//   /lib/models/crmModel.ts\r\n\r\nimport * as mongoose from 'mongoose';\r\nconst Schema = mongoose.Schema;\r\n\r\n\r\nexport var addressSchema = new Schema({\r\n    addressId :{\r\n        type: Number,\r\n        index: true,\r\n        unique: true\r\n    },\r\n    city:{ type: String },\r\n    state:{ type: String },\r\n    _id: false\r\n});\r\n\r\nexport const ContactSchema = new Schema({\r\n    firstName: {\r\n        type: String,\r\n        required: 'Enter a first name'\r\n    },\r\n    lastName: {\r\n        type: String,\r\n        required: 'Enter a last name'\r\n    },\r\n    email: {\r\n        type: String,\r\n        trim: true,\r\n        index: true,\r\n        unique: true,\r\n        required: true,\r\n    },\r\n    company: { type: String },\r\n    phone: { type: Number },\r\n    created_date: {\r\n        type: Date,\r\n        default: Date.now\r\n    },\r\n    address: [addressSchema]\r\n})\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Madhu Korada\\Desktop\\CODE\\nodets_crud_mongo_testing\\lib\\routes\\crmRoutes.ts","messages":[{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":7,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":7,"endColumn":68,"fix":{"range":[217,220],"text":"let"}},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'app' should be typed.","line":12,"column":19,"nodeType":"Identifier","messageId":"missingArgType","endLine":12,"endColumn":22}],"errorCount":1,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"// /lib/routes/crmRoutes.ts\r\n\r\nimport { Request, Response } from \"express\";\r\nimport { ContactController } from \"../controllers/crmController\";\r\nimport * as Validate from '../utilities/validators/contactValidator';\r\n\r\nvar contactController: ContactController = new ContactController();\r\n\r\n\r\nexport class Routes {\r\n\r\n    public routes(app): void {\r\n\r\n        // Smaple Hello world\r\n        app.route('/')\r\n            .get((req: Request, res: Response) => {\r\n                res.status(200).send({\r\n                    message: 'Hello World'\r\n                })\r\n            })\r\n\r\n        // Create or Get Contacts\r\n        app.route('/contact')\r\n            .get(contactController.getAllContacts)\r\n            .post(Validate.AddSchema, contactController.addNewContact);\r\n\r\n\r\n        // Specific Contact Editing/Manipulating\r\n        app.route('/contact/:contactId')\r\n            .get(contactController.getContactWithID)\r\n            .put((req: Request, res: Response) => {\r\n                // Update a contact\r\n                res.status(200).send({\r\n                    message: 'PUT request successfulll!!!!'\r\n                })\r\n            })\r\n            .delete((req: Request, res: Response) => {\r\n                // Delete a contact\r\n                res.status(200).send({\r\n                    message: 'DELETE request successfulll!!!!'\r\n                })\r\n            })\r\n\r\n        //Add Address to Contacts \r\n        app.route('/contact/address/:contactId')\r\n            .post(contactController.addAddress)\r\n    }\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Madhu Korada\\Desktop\\CODE\\nodets_crud_mongo_testing\\lib\\server.ts","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Madhu Korada\\Desktop\\CODE\\nodets_crud_mongo_testing\\lib\\utilities\\validators\\contactValidator.ts","messages":[{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":1,"column":37,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":1,"endColumn":65},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":12,"column":7,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":12,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'req' should be typed.","line":12,"column":8,"nodeType":"Identifier","messageId":"missingArgType","endLine":12,"endColumn":11},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'res' should be typed.","line":12,"column":13,"nodeType":"Identifier","messageId":"missingArgType","endLine":12,"endColumn":16},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'next' should be typed.","line":12,"column":18,"nodeType":"Identifier","messageId":"missingArgType","endLine":12,"endColumn":22}],"errorCount":1,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const { check, validationResult } = require('express-validator');\r\n\r\nexport const AddSchema = [\r\n    check('firstName')\r\n        .not()\r\n        .isEmpty()\r\n        .withMessage('first name can not be empty!')\r\n        .bail()\r\n        .isLength({ min: 3 })\r\n        .withMessage('Minimum 3 characters required!')\r\n        .bail()\r\n    , (req, res, next) => {\r\n        const errors = validationResult(req);\r\n        if (!errors.isEmpty())\r\n            return res.status(422).json({ errors: errors.array() });\r\n        next();\r\n    },\r\n]","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Madhu Korada\\Desktop\\CODE\\nodets_crud_mongo_testing\\test\\contact.spec.ts","messages":[{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":7,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":7,"endColumn":36,"fix":{"range":[168,171],"text":"let"}},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":7,"column":15,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":7,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'res' is defined but never used.","line":29,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":23},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":35,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":41,"endColumn":10,"fix":{"range":[832,835],"text":"let"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'res' is defined but never used.","line":45,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":23}],"errorCount":3,"warningCount":2,"fixableErrorCount":2,"fixableWarningCount":0,"source":"process.env.NODE_ENV = 'test';\r\n\r\nimport app from \"../lib/app\";\r\nimport chai from 'chai';\r\nimport chaiHttp from 'chai-http';\r\nimport * as conn from '../lib/db/index';\r\nvar request = require('supertest');\r\n\r\nchai.use(chaiHttp);\r\n\r\n\r\n\r\ndescribe('Contact Testing', function () {\r\n    before((done) => {\r\n        conn.connect()\r\n          .then(() => done())\r\n          .catch((err) => done(err));\r\n    })\r\n    \r\n    after((done) => {\r\n        conn.close()\r\n          .then(() => done())\r\n          .catch((err) => done(err));\r\n      })\r\n\r\n    it(\"Get Contact\", function (done) {\r\n        request(app)\r\n            .get('/contact')\r\n            .then((res) => {\r\n                // console.log(\"Data\", JSON.parse(res.text).message);\r\n                done();\r\n            })\r\n    });\r\n    it(\"create Contact\", function (done) {\r\n        var reqObj = {\r\n            \"firstName\":\"Abhijeeth\",\r\n            \"lastName\": \"D\",\r\n            \"email\":\"abi@gmail.com\",\r\n            \"phone\":9998789878,\r\n            \"company\":\"BB4\"\r\n        }\r\n        request(app)\r\n            .post('/contact')\r\n            .send(reqObj)\r\n            .then((res) => {\r\n                // console.log(\"Data\", JSON.parse(res.text));\r\n                done();\r\n            })\r\n    });\r\n})","usedDeprecatedRules":[]}]